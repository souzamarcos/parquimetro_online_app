import React, { Component } from 'react';
import {
  Text,
  TouchableHighlight,
  StyleSheet,
  Alert,
  View,
  ScrollView,
  ActivityIndicator
} from 'react-native';
import { defaultStyles } from '../styles';
import cores from '../styles/cores';
import Cabecalho from './Cabecalho';
import { TextInputMask } from 'react-native-masked-text';
import { connect } from 'react-redux';
import { consultarPlaca, modificaPlaca } from '../actions/ConsultaActions';
import PushNotification from 'react-native-push-notification';

class TelaConsultaGuarda extends Component {

    consultarPlaca(){
        PushNotification.localNotificationSchedule({
            /* Android Only Properties */
            id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            //ticker: "O tempo está acabando", // (optional)
            autoCancel: true, // (optional) default: true
            largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
            //bigText: "Não se esqueça do parquímetro, o seu tempo está acabando.", // (optional) default: "message" prop
            //subText: "This is a subText", // (optional) default: none
            color: "blue", // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            //tag: 'some_tag', // (optional) add tag to message
            //group: "group", // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification
            priority: "high", // (optional) set notification priority, default: high
            visibility: "public", // (optional) set notification visibility, default: private
            importance: "high", // (optional) set notification importance, default: high
        
            // /* iOS only properties */
            // alertAction: // (optional) default: view
            // category: // (optional) default: null
            // userInfo: // (optional) default: null (object containing additional notification data)
        
            /* iOS and Android properties */
            title: "Seu tempo está acabando", // (optional)
            message: "Não se esqueça do parquímetro", // (required)
            playSound: false, // (optional) default: true
            soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            //number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
            repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
            //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
            date: new Date(Date.now() + (10 * 1000)) // in 60 secs
        });

        PushNotification.cancelLocalNotifications({id: '0'});

        if(!this.props.placa || this.props.placa.length != 8){
            Alert.alert(
                'Aviso',
                'Preencha a placa corretamente',
                [
                  {text: 'OK'},
                ],
                { cancelable: false }
            );
            return;
        }

        this.props.consultarPlaca(this.props.placa);
    }
    
    render(){
        return (
            <ScrollView contentContainerStyle={styles.tela}>
                <Cabecalho titulo="Consulta" style={styles.cabecalho} />
                <Text style={styles.title}>
                    Consultar Veículo
                </Text>
                <TextInputMask
                    placeholder="Placa"
                    type="custom"
                    style={styles.input}
                    onChangeText={ (placa) => this.props.modificaPlaca(placa) }
                    value={this.props.placa}
                    underlineColorAndroid={cores.cinza}
                    options={{
                        mask: 'AAA-9999',
                    }}
                />
                {
                    this.props.carregandoSessao ? 
                    (
                        <ActivityIndicator style={styles.activityIndicator} size="large" color={cores.verde} />
                    ) :
                    (    
                        <TouchableHighlight
                            onPress={() => this.consultarPlaca()}
                            style={styles.botaoVerde}
                            underlayColor="rgba(0, 0, 0, 0.05)"
                        >
                            <Text style={styles.botaoVerdeText}>
                                Buscar
                            </Text>
                            
                        </TouchableHighlight>
                    )
                }
            </ScrollView>
        );
    }
}

const styles = StyleSheet.create({
    tela: {
        ...defaultStyles.telaFull,
        ...defaultStyles.telaCentralizada,
        ...defaultStyles.telaPaddingHorizontalGrande,
    },
    telaCentralizada: {
        ...defaultStyles.telaFull,
        ...defaultStyles.telaCentralizada,
    },
    activityIndicator: {
        paddingVertical: 9,
        marginBottom: 40,
    },
    cabecalho: {
        marginBottom: 40,
    },
    title: {
        ...defaultStyles.textTitle,
        color: cores.azul,
        marginVertical: 40,
    },
    input: {
        ...defaultStyles.input,
        marginBottom: 40,
    },
    botaoVerde: {
        ...defaultStyles.botaoVerde,
        marginBottom: 40,
    },
    botaoVerdeText: {
        ...defaultStyles.botaoVerdeText,
    },
});

const mapStateToProps = state => {
    return {
        placa: state.ConsultaReducer.placa,
        sessao: state.ConsultaReducer.sessao,
        carregandoSessao: state.ConsultaReducer.carregandoSessao,
        erro: state.ConsultaReducer.erro,
    }
};

export default connect(mapStateToProps, { consultarPlaca, modificaPlaca })(TelaConsultaGuarda);